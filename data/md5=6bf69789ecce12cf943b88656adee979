No new subscribers, so I'm assuming everyone knows how to access the content-addressable storage.

I described a program called concierge in a previous e-mail to the main mailing list.  That e-mail's MD5 is 112cc0ff8eebd4387823fa118ebd558f, and it refers to a file it calls proxy_implementation.txt that has a final draft with an MD5 of 075ab4baf9ff13f02aa36129c32bcea4.  That links to a file with an MD5 of aac1ecd2550bfc4acabecfddb22abf3d which talks about concierge.
So I sent concierge over to the other computer, like that e-mail said I wanted to do.
Then I wanted to test that I could run concierge over there, but I didn't have a configuration webserver (or "configurator", as I like to call them) for it.  Rather than write one, I thought back to a previous e-mail where I mentioned an "echo" webserver.  That e-mail has an MD5 of bf2cb5d7acaa7881f53cc4d0c9abfe41.
I decided that I could test concierge by pointing it at an echo server for its configurator.  To make this work, I took advantage of the way I designed concierge to work.  For every request that comes in, concierge appends the path part of that request's URL to a prefix that concierge takes as a command-line argument.  The echo server is kind of dumb and just responds with whatever you send it in the path part of its request's URL, minus the initial solidus character.  When concierge gets a request, it responds by first looking up the URL of the upstream resource.  To look up that URL, concierge looks inside the body of the response it gets when it places a request to its configurator.  If I want concierge to give me a response that corresponds to something that the echo server tells it, then I need for concierge's configurator to tell concierge to ask the echo server.  I can make the echo server do that, by beginning the path part of the URL of the request to the echo server with another reference to the echo server.
To make concierge ask the echo server for a response to a request for a resource whose URL has a path part that begins with a reference to the echo server, all I need to do is tell concierge that its configurator's URL prefix contains the echo server's encoding of the echo server's address.  For example, if the echo server were hosted at "http://echo.example/", then the echo server would respond to a request for "http://echo.example/http:%2f/echo.example/hello" with "http://echo.example/hello", since the "%2f" encodes the solidus character.  The URI encoding of the solidus is necessary because otherwise someone along the line (I think it's my implementation of concierge, but I haven't checked) will see the double slash and helpfully remove the empty path component.  But the echo server unescapes (that is, decodes) that sequence of characters before building its response.
If I tell concierge to use "http://echo.example/http:%2f/echo.example/" as its configurator, and if the configurator runs on a computer with a domain name of "echo.example" and listens for requests on port 80, and concierge runs a computer with a domain name of "concierge.example" and listens for requests on port 80, then an HTTP request to http://concierge.example/hello%20world will result in concierge placing a request for "http://echo.example/http:%2f/echo.example/hello%20world" to find out where it should look for the resource it serves up at "/hello%20world", and echo.example will respond with "http://echo.example/hello world".  Then, concierge will conclude that the way to respond to the request that came in asking for "/hello%20world" is to fetch the resource at "http://echo.example/hello world" and then respond with the contents of that resource.  So concierge will place a request to "http://echo.example/hello world", and the echo server will respond with "hello world", and then concierge will respond back downstream with a response of "hello world".
And that's how I can use an echo webserver to test concierge.  It effectively makes concierge into an echo server itself, though it handles escape sequences kind of funny.

So, I did that yesterday, and then I put off writing about it all day yesterday and most of today.  But here it is now.

Next up, I need to write about test-driven development, because I told the other mailing list I would several e-mails ago.
