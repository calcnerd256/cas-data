var fs = require("fs");
var http = require("http");

var Message = require("navscrib/Message").Message;
var respondOkay = require("navscrib/webserver/respondOkay").respondOkay;
var notFound = require("navscrib/webserver/notFound").notFound;
var clientLibrary = require("navscrib/webserver/client");


var isNumeric = clientLibrary.isNumeric;
var jqSha = "87083882cc6015984eb0411a99d3981817f5dc5c90ba24f0940420c5548d82de";

function getRootsAsync(pool, rootsback){
 if(!(pool.length)) return rootsback(pool, rootsback);
 var start = pool.filter(
  function(candidate){
   return !(candidate.getBacklinks().length);
  }
 );
 var reachabilityCache = [];
 if(!(start.length)){
  start = [
   pool.map(
    function(candidate){
     return [
      candidate,
      pool.filter(
       function(other){
        return other.canReach(candidate, reachabilityCache);
       }
      ).length,
      candidate.reachable({}, reachabilityCache).length
     ];
    }
   ).sort(
    function(a, b){
     return a[1] - b[1];
    }
   ).sort(
    function(a, b){
     return b[2] - a[2];
    }
   )[0][0]
  ];
 }
 return setTimeout(
  function(){
   var reaches = start.map(
    function(m){
     return m.reachable();
    }
   );
   var reach = [].concat.apply([], reaches);
   var newPool = pool.filter(
    function(m){
     if(-1 != start.indexOf(m)) return false;
     return -1 == reach.indexOf(m);
    }
   );
   return getRootsAsync(
    newPool,
    function(roots){
     return rootsback(
      start.concat(roots)
     );
    }
   );
  },
  100
 );
}
function respondRoot(res){
 return getRootsAsync(
  Message.messages,
  function(roots){
   respondOkay(
    res,
    "text/html",
    [
     "<html>",
     " <head>",
     "  <meta charset=\"utf-8\" />",
     "  <title>navscrib</title>",
     "  <script src=\"/sha256-" + jqSha + ".js\"></script>",
     "  <script src=\"/application.js\"></script>",
     "  <script>beforeReady();</script>",
     "  <style>",
     "  .visitation{",
     "   border: 1px solid black;",
     "   max-width: 45%;",
     "  }",
     "  .preview{",
     "   float: right;",
     "  }",
     "  </style>",
     " </head>",
     " <body>",
     "  <div>",
     "   <ul id=\"roots\">",
     roots.map(
      function(message){
       return [
        "    <li>",
        " <a href=\"./" + +(message.index) + "/\">" + +(message.index) + "</a>",
        " <span class=\"shortname\"></span>",
        "</li>"
       ].join("\n    ");
      }
     ).join("\n"),
     "   </ul>",
     "   <div id=\"preview\" class=\"visitation preview\"></div>",
     "  </div>",
     "  <ul id=\"visitations\"></ul>",
     " </body>",
     "</html>",
     ""
    ].join("\r\n")
   );
  }
 );
}

function respondJs(res){
 respondOkay(
  res,
  "application/javascript",
  [
   isNumeric,
   clientLibrary.last,
   clientLibrary.beforeReady,
   clientLibrary.create,
   clientLibrary.rename,
   clientLibrary.add,
   clientLibrary.remove,
   clientLibrary.get,
   clientLibrary.makeAnchor,
   clientLibrary.preview,
   clientLibrary.visit
  ].join("\n\n")
 );
}

function init(port){
 function listenback(){
  console.log("listening at http://127.0.0.1:" + +port + "/");
 }
 function fileback(error, jqSrc){
  if(error) return console.error(error);
  function handle(req, res){
   var path = req.url.split("?")[0].split("/");
   if("" != path.shift()) return notFound(res);
   if(1 == path.length)
    if("" == path[0])
     if("GET" == req.method.toUpperCase())
      return respondRoot(res);
   if(path[0] == "sha256-" + jqSha + ".js")
    return respondOkay(res, "application/javascript", jqSrc);
   if(path[0] == "application.js")
    return respondJs(res);
   if(isNumeric(path[0]))
    if(+(path[0]) < Message.messages.length)
     return Message.messages[
      (+(path[0]))
     ].respond(
      req,
      res,
      path.slice(1)
     );
   return notFound(res);
  }
  return http.createServer(handle).listen(port, listenback);
 }
 jqFilename = "./sha256-" + jqSha + ".js";
 return fs.readFile(jqFilename, fileback);
}

module.exports.init = init;
