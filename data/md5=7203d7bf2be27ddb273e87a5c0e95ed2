<html>
	<head>
		<title>facts | MD5 4eaa2d17b974764f2dfa6ab63cf58b2b</title>
	</head>
	<body>
		<h1>
			facts from
			<a href="./md5=4eaa2d17b974764f2dfa6ab63cf58b2b">MD5 4eaa2d17b974764f2dfa6ab63cf58b2b</a>
		</h1>
		<h2>context</h2>
		<p>
			I was trying to revise a document from <a href="./md5=4eaa2d17b974764f2dfa6ab63cf58b2b">its rough draft</a>.
			I thought I could take the approach of breaking it down into its constituent parts and reassembling them into something better.
			This turned out to be a bigger undertaking than I had imagined.
			My first approach was to extract "facts" from the rough draft.
			I didn't get very far in that.
			I thought I would pull out reusable nouns for the facts to use and then express the facts in a fake dialect of Lisp.
			I got <a href="./md5=85424681e4d7dabc66ac2f1c7b85cdef#facts">partway through the first paragraph</a>.
			Along the way, I took some of those nouns and replaced unnamed references to them in the rough draft with their names.
			I also named the paragraphs and titled the document.
			Here's what that looked like:
		</p>
		<h2>
			publishing my proxy <i>concierge</i> to move it,
			and dreaming about the future of editing such programs
		</h2>
		<h3>96cc20c6e5def0f9c6bd05656b239813</h3>
		<p>
			cf.
			<a href="./md5=85424681e4d7dabc66ac2f1c7b85cdef#facts">paragraph 1 facts</a>
		</p>
		<h3>split server.js and node_modules</h3>
		<h4>facts</h4>
		<ul>
		</ul>
		<h4>from rough draft</h4>
		<h5>current sentence</h5>
		<p>
			After writing the previous paragraph, I split concierge.js into serverlib.js and the code ( concierge.js ) that uses serverlib.js and has the structure of the concierge.program .
		</p>
		<h5>rest of paragraph</h5>
		<ul>
			<li>
				The MD5 of concierge.js is <i>39ebe4324b32ebe8a3768eb35e093c40</i>, and concierge.js expects to find serverlib.js under "./node_modules/serverlib/index.js" .
			</li>
			<li>
				This ./node_modules/ setup is easier to work with than the last NodeJS program I brought into an older CAS I had on [REDACTED 2], which required me to copy the files to specific places instead of symlinking anything.
			</li>
			<li>
				I might still have to copy the files around, but at least now I won't have to put them in exact relative directories, because node_modules allows me a little more flexibility in how I manage my locations.
			</li>
		</ul>
		<h3>future plans for a better serverlib.js</h3>
		<h4>facts</h4>
		<ul>
		</ul>
		<h4>from rough draft</h4>
		<h5>current sentence</h5>
		<p>
			I do want to, at some point, re-implement the library ( serverlib.js ) that supports concierge.js , to make it rely less on NodeJS's libraries such as their HTTP library.
		</p>
		<h5>rest of paragraph</h5>
		<ul>
			<li>
				But that will have to be another time.
			</li>
			<li>
				For now, just separating out the bad implementation from the thing that uses it will have to suffice.
			</li>
		</ul>
		<h3>to publish serverlib.js and move it to [REDACTED 2]</h3>
		<h4>facts</h4>
		<ul>
		</ul>
		<h4>from rough draft</h4>
		<h5>current sentence</h5>
		<p>
			After writing the above thought down, I've committed to publishing this imperfect implementation of the library that supports concierge.js .
		</p>
		<h5>rest of paragraph</h5>
		<ul>
			<li>
				This is the easiest way for me to get it into [REDACTED 2].
			</li>
			<li>
				SFTP, on the other hand, would require me to stand up and walk across the room, and that's clearly more work than sitting here typing and thinking about decisions for what to publish and when.
			</li>
			<li>
				Obviously.
			</li>
			<li>
				Anyway, the MD5 of this serverlib is <i>2a874208d6d9506a4572acab90eabad8</i>, and I already said where it needs to be stored so that concierge.js can use it.
			</li>
			<li>
				I've written it against NodeJS version 4.2.6, so I don't know what features of that version it depends upon and how much it would need to be changed to run on a different version.
			</li>
			<li>
				I think [REDACTED 2] runs a much more recent version, and I doubt any functionality I'm using is deprecated between those two versions, so I expect it to run just fine when I bring it over.
			</li>
		</ul>
		<h3>future for concierge.program and GUI</h3>
		<h4>facts</h4>
		<ul>
		</ul>
		<h4>from rough draft</h4>
		<h5>current sentence</h5>
		<p>
			At some point, I want to make concierge.program be the real version of concierge, so that I can run concierge.program directly and, if I need to change concierge.program, modify concierge.program and then run the modified version directly.
		</p>
		<h5>rest of paragraph</h5>
		<ul>
			<li>
				Better still will be if I can make some alternate UI that presents unto me the structure of that tiny program and lets me edit it in a maximally fluent way.
			</li>
			<li>
				For instance, the top level of concierge.program is (procedure (parameters ...) (result ...)), so it would be nice if I could design a GUI widget for editing instances of that concept and then have the editor figure out that it should use that GUI for editing that program unless I ask it to go spelunking into the underlying structure.
			</li>
			<li>
				Bonus if I could define multiple and switch between them, with a default one that's always available whether or not any of the special ones match the thing I'm trying to edit.
			</li>
			<li>
				Then people could collaborate on a structure like that, and each can edit it in their favorite editor for that shape.
			</li>
			<li>
				It might be jarring, however, for someone's edit that is natural in their editor to transform the structure into one not recognized by another's editor; then the latter would see the thing they were looking at pop into the default view of it in response to an edit the former made, and the former would see a simple edit within their environment, so there would be a mismatch between how big each of them perceives the change to be, and the one who made the change would see the change as smaller than the other one.
			</li>
			<li>
				Talk about a recipe for stepping on each other's toes!
			</li>
		</ul>
	<body>
</html>
