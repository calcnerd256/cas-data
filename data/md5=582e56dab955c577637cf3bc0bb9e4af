<html>
	<head>
		<title>2nd draft | MD5 4eaa2d17b974764f2dfa6ab63cf58b2b</title>
	</head>
	<body>
		<h1>
	  		<a href="./md5=4eaa2d17b974764f2dfa6ab63cf58b2b">MD5 4eaa2d17b974764f2dfa6ab63cf58b2b</a>
		</h1>
		<h2>Abstract</h2>
		<p>
			I want to copy a program from one computer to another.
			I want to go about copying it by publishing it.
			The program I want to move isn't written very well.
			I don't want to publish a bad version of my program.
		</p>
		<p>
			Then I decide to make the program a little better before I'll publish it.
		</p>
		<p>
			Talking about the program reminds me of the direction I want to take this program in the future.
			Thinking about the future of the program gives me some new ideas.
		</p>
		<h2><i>concierge</i>'s journey</h2>
		<h3>bad proxy &rarr; { <i>concierge</i>, scab }</h3>
		<p>
			In <a href="./md5=a6472dcc08c049beca62d6ee1b201348">an e-mail called "services calendar and static"</a>, I described a bad version of my proxy and the act of splitting it into <a href="./md5=49c2096c4c95307db1e603e4566a82cc">the smaller proxy</a> called <i>concierge</i> and a program called scab that tells <i>concierge</i> what its configuration is.
			It's called <i>concierge</i> because it sits at the front and directs you to someone else based on the authority of yet someone else, and <i>ma&icirc;tre d'</i> is too hard to spell.
		</p>
		<h3><i>concierge</i> : (fake Lisp &rarr; NodeJS)</h3>
		<p>
			I <a href="./md5=6c4c8123ea1efc8851e333afece5ceba">wrote <i>concierge</i> in a fake version of Lisp</a>.
			My plan was to write some applications in that fake Lisp and then use a real Lisp implementation to translate them into something lower-language.
			I thought maybe I could translate them into a lower Lisp or maybe into C or assembly, or maybe take a detour through <a href="https://nodejs.org/">NodeJS</a> on the way to C or assembly.
			I tried that for a little while and then gave up, but I had already written <i>concierge</i> in this fake Lisp, and I wanted to run it.
			I decided to translate <i>concierge</i> by hand into NodeJS while preserving the structure of the program.
		</p>
		<h3>publish <i>concierge</i> &rarr; CAS</h3>
		<p>
			It's time to copy <i>concierge</i> over to another computer.
			I could copy it using <a href="https://linux.die.net/man/1/sftp">sftp(1)</a>, but I want to use <a href="./md5=0d7177f4b08b7f2f81579a37073ac645">my shiny new CAS</a> for it, because <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">every problem looks like a nail</a> and because I vastly underestimated how much work I would end up putting into doing it this way.
			I thought publishing would be easy, but I've added other rules that are making it harder.
			<ul>
				<li>I had decided that I won't push new files to my public CAS without sending out an e-mail.</li>
				<li>I had decided that I won't send out a new e-mail until I have something readable.</li>
				<li>I had decided that I won't throw away the rough draft but will instead show my work and hide it behind a hyperlink.</li>
			</ul>
			So, I compared what I thought would be easy to the cost of getting up and walking across the room, and I <a href="https://en.wikipedia.org/wiki/Garbage_in,_garbage_out">consequently</a> came up with the wrong answer to the question of which one would be easier.
			I imagined it involving just a little bit of writing about my thought process and then sending out a newsletter.
			A few days later, I've tried several approaches to try to make my rough draft into something I can send out, and I have yet to find one.
			This one probably won't do, either, but it migh make a decent second draft from which I can derive a third version.
		</p>
		<h3><i>concierge</i> &rarr; { spec, serverlib }</h3>
		<p>
			I ended up choosing to split it into <a href="./md5=2a874208d6d9506a4572acab90eabad8">a bad library implementing the primitives</a> and <a href="./md5=39ebe4324b32ebe8a3768eb35e093c40">a nice program using them</a>.
			The program that uses that library expects to find it in <a href="https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders">the usual node_modules way</a> under a module called "serverlib", so I'll need to place it there after I get it into my CAS.
			Last time I did something like this, I had used more specific local filepaths in my call to <a href="https://nodejs.org/api/modules.html#modules_require_id">require()</a>, and so I had to maneuver copies of them into the right place.
			I was unsure whether I was willing to publish the bad implementation of serverlib, but I have decided that I am.
			When I translated concierge into NodeJS, I targeted <a href="https://nodejs.org/dist/v4.2.6/docs/api/">the old version that is installed on that computer</a>.
			I don't know what features of that version it depends upon and how much it would need to be changed to run on a different version.
			I think the machine to which I'm copying <i>concierge</i> runs a much more recent version of NodeJS, and I doubt any functionality I'm using is deprecated between those two versions, so I expect it to run just fine when I bring it over.
			I do want to, at some point, re-implement serverlib, to make it rely less on NodeJS's libraries such as <a href="https://nodejs.org/dist/latest/docs/api/http.html">their HTTP library</a>.
			But that will have to be another time.
			For now, just separating out the bad implementation from the thing that uses it will have to suffice.
		</p>
		<h3>future Lisp</h3>
		<p>
			At some point, I want to use the fake Lisp version of concierge as the real one.
			Then I can run it directly.
			And, if I need to change it, I will then be able to modify it and run the modified version directly.
		</p>
		<p>
			Better still will be if I can make some alternate UI that presents me the structure of that tiny program and lets me edit it in a maximally fluent way.
			For instance, the top level is (procedure (parameters ...) (result ...)).
			So it would be nice if I could design a GUI widget for editing instances of that concept.
			Then maybe an editor could figure out that it should use that GUI for editing that program.
			Unless I ask it to go spelunking into the underlying structure, that is.
		</p>
		<p>
			Bonus if I could define such UIs and switch between them.
			I would need to have a default one that's always available whether or not any of the special ones match the thing I'm trying to edit.
		</p>
		<p>
			Then, if people could collaborate on a structure like that, each could edit it in their favorite editor for that shape.
			It might be jarring, however, for someone's edit which is natural in their editor to transform the structure into one not recognized by another's editor.
			Then the latter would see the thing they were looking at pop into the default view of it in response to an edit the former made, while the former would see a simple edit within their environment.
			So there would be a mismatch between how big each of them perceives the change to be.
			The one who made the change would see the change as smaller than the other one would see it.
			Talk about a recipe for stepping on each other's toes!
		</p>
	</body>
</html>
